= Conclusiones
En esta sección final, se sintetizan los resultados obtenidos en el diseño e implementación de una Máquina de Turing para el modelado de la Unidad Lógico-Aritmética (ALU) en el contexto de las arquitecturas Von Neumann. Específicamente, se abordó la implementación de las operaciones lógicas binarias de conjunción (AND), en el cual tras una normalización de resultados (limpieza de ceros a la izquierda) ejemplificó el ingreso binario. Se presentará un análisis crítico del proceso de modelado de esta Máquina de Turing, evaluando su complejidad, adecuación y la cobertura que ofrece sobre las operaciones lógicas fundamentales.

Posteriormente, se destacará la relevancia teórica y práctica de las Máquinas de Turing como modelo fundamental de computación, estableciendo conexiones con las obras fundamentales de autores como Turing, Church, Sipser y Hopcroft. Finalmente, se explorarán posibles mejoras y extensiones al modelo actual, enfocándose en cómo aumentar su funcionalidad para simular una ALU más completa y su potencial para profundizar en el estudio de la arquitectura de computadoras.

== Evaluación del Modelado
La construcción de nuestra Máquina de Turing para simular una ALU se fundamentó en la Tesis de Church-Turing, que postula la equivalencia entre cualquier función "computable" por un algoritmo. Este principio nos permitió abordar la lógica interna de una ALU, un componente central de la arquitectura Von Neumann, desde la perspectiva de un modelo computacional universal.

El proceso de diseño implicó la definición precisa de estados, transiciones, alfabetos de cinta e *input*, y la manipulación del cabezal para simular operaciones bit a bit. La complejidad de la Máquina de Turing resultante, aunque mayor que la de un autómata finito simple, fue manejable gracias a la naturaleza secuencial y determinista de las operaciones lógicas binarias. Se logró una abstracción efectiva de los circuitos lógicos a nivel de compuertas mediante reglas de transición de la Máquina de Turing.

La Máquina de Turing desarrollada es capaz de procesar entradas binarias de longitudes diferentes para AND, asumiendo ceros explícitos y normalizando el resultado al eliminar ceros a la izquierda (excepto por un único '0' si el resultado es cero). Por otra parte, la adecuación del modelo se evaluó en función de las propiedades fundamentales de una ALU, lo cual se preveía en el alcance del proyecto. Sin embargo, es importante destacar que, si bien la Máquina de Turing es teóricamente capaz de simular cualquier cómputo, la implementación concreta se centró en solo el operador AND debido a la complejidad de modelar una ALU completa con todas sus funciones aritméticas, de desplazamiento y de comparación requeriría una máquina de Turing considerablemente más grande y compleja, lo que es un desafío práctico de diseñar directamente *hardware* complejo a partir de descripciones de Máquinas de Turing. No obstante, para la operación lógica definida, el modelo desarrollado es completo y efectivo, cumpliendo con las funcionalidades centrales deseadas a pesar de la inherente verbosidad y granularidad de las Máquinas de Turing para representar operaciones más grandes.

== Importancia de las TMs y la Tesis de Church-Turing
A partir del trabajo realizado, es claro que la relevancia teórica de las Máquinas de Turing reside en su estatus como el modelo computacional universal por excelencia. La Tesis de Church-Turing postula que cualquier problema que pueda ser resuelto por un algoritmo (en cualquier sentido intuitivo) puede ser resuelto por una Máquina de Turing. Esta equivalencia permite el desarrollo de la informática moderna, implicando que todas las computadoras programables, desde el más simple microcontrolador hasta las supercomputadoras, son fundamentalmente equivalentes en su poder computacional a una Máquina de Turing. Autores como Sipser (2012) y Hopcroft et al. (2006) han destacado que, a pesar de su aparente simplicidad, este modelo forma la base fundamental para comprender los límites y capacidades de la computación.

En contraposición, el desarrollo de nuestra simulación de una ALU muestra la pertinencia de las Máquinas de Turing en el estudio de la arquitectura de computadoras; ya que la Máquina de Turing Universal (UTM) es el precursor conceptual del computador de programa almacenado, donde tanto las instrucciones como los datos residen en la misma memoria. La ALU es el corazón de la Unidad Central de Procesamiento (CPU) en esta arquitectura, ejecutando las operaciones básicas que la UTM puede modelar. Al simular operaciones lógicas como AND, OR y XOR con una Máquina de Turing, las operaciones fundamentales del *hardware* se descomponen en pasos elementales y deterministas que un sistema universalmente computable puede ejecutar.

En otras palabras, nuestro proyecto demuestra que la capacidad de una Máquina de Turing para llevar a cabo estas operaciones básicas teóricas de cómo los computadores modernos procesan la información. Si bien un computador Von Neumann real utiliza circuitos electrónicos complejos para lograr esto de manera eficiente, el modelo de Turing proporciona la abstracción conceptual que explica por qué estas operaciones son computables y cómo se pueden construir a partir de reglas simples.

== Mejoras y Ampliaciones
Para aumentar la expresividad y la capacidad de simulación de nuestra Máquina de Turing actual en el contexto de una ALU, podemos considerar diversas extensiones:

1.  *Integración de Operaciones Aritméticas:* La adición de la suma binaria (*ADD*) sería el siguiente paso lógico, seguida de la resta (*SUB*), que puede implementarse mediante el complemento a dos y la suma. Esto permitiría modelar las operaciones aritméticas esenciales de una ALU. La complejidad aumentaría debido al manejo de acarreos y préstamos, lo que haría necesario implementar desplazamientos lógicos (*Shift Left/Right Logical*) y desplazamientos aritméticos (*Shift Left/Right Arithmetic*), así como rotaciones (*Rotate Left/Right*). Esta integración lograría ampliar la funcionalidad de la MT-ALU para manipular bits de manera eficiente, lo cual es necesario para la multiplicación, división y el manejo de datos.

2.  *Manejo de Flags de Estado:* Una ALU real produce *flags* (bits de estado) como Cero (Z), Acarreo (C), Negativo (N) y Desbordamiento (V), que sirven para implementar el control de flujo en un procesador. Esto implica que se deberían construir varias Máquinas de Turing para poder implementar la lógica de lectura que tiene una ALU real. Lo que se buscaría entonces sería poder albergar "meta-MTs" para cada una de las operaciones tanto aritméticas como lógicas. Esto constituiría un gran y laborioso valor, ya que para ser factible, debería poder implementar incluso una forma tridimensional de modelamiento, dada la alta cantidad de datos, tanto duplos como multiduplos, que cada función u operación puede tener. De esta manera, se mejoraría la escalabilidad del modelo conceptual.


#pagebreak()