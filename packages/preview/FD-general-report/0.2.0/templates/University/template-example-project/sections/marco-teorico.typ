#import "@preview/mitex:0.2.5": *

= Marco Te√≥rico
En esta secci√≥n, profundizaremos en la definici√≥n de los conceptos referentes a la teor√≠a de la computaci√≥n, espec√≠ficamente en los aut√≥matas de tipo 0 dentro de la jerarqu√≠a de Chomsky, as√≠ como su relaci√≥n con el pilar de la decidibilidad.

== Las M√°quinas de Turing: Definici√≥n Formal y Componentes
Una M√°quina de Turing (MT), propuesta por Alan M. Turing en 1936, es un modelo matem√°tico hipot√©tico que proporciona una definici√≥n operacional y formal de la noci√≥n intuitiva de computabilidad en el √°mbito discreto. Este modelo abstracto se define como el conjunto de componentes, los cuales son la unidad de control (aut√≥mata finito que representa la m√°quina en un momento dado), la cinta (con extensi√≥n indefinida; cada celda contiene un s√≠mbolo de #mi("\Gamma")) y el cabezal. La MT ‚Äúreconoce‚Äù un lenguaje formal en el sentido de que admite cadenas como entrada y decide los estados subsecuentes para obtener un resultado.

En este sentido, los lenguajes aceptados por MT se denominan recursivamente enumerables, ya que opera con una cinta infinita hacia la derecha (y eventualmente hacia la izquierda) dividida en celdas. El cabezal de lectura/escritura se mueve paso a paso sobre la cinta. En cada paso, la MT lee el s√≠mbolo de la celda actual, consulta la funci√≥n #mi("\delta") seg√∫n el estado actual y el s√≠mbolo le√≠do, escribe un nuevo s√≠mbolo en esa celda, cambia de estado y mueve el cabezal a la Izquierda o Derecha. El proceso contin√∫a hasta que la MT entra a un estado de parada (aceptaci√≥n o rechazo). Al terminar, el contenido de la cinta y/o el estado final determinan la salida o la decisi√≥n sobre la entrada.

Por otra parte, formalmente una M√°quina de Turing determinista de una sola cinta se define como una 7-tupla: #mitex("M=(Q, \Sigma, \Gamma, \delta, q_{0}, q_{accept}, q_{reject})")
Los componentes de esta tupla son: 
#show table.cell.where(y: 0): strong
#set table(
  stroke: (x, y) => if y == 0 {
    (bottom: 0.7pt + black)
  },
  align: (x, y) => (
    if x > 0 { left }
    else { left }
  )
)

#table(
  columns: (0.5fr, 0.5fr, 1fr),
  table.header(
    [Componente],
    [S√≠mbolo Matem√°tico],
    [Descripci√≥n],
  ),
  [Estados],[#mi("Q")], [Conjunto finito y no vac√≠o de estados de la m√°quina.],
  [Alfabeto de Entrada],[#mi("\Sigma")], [Conjunto finito de s√≠mbolos que la m√°quina puede recibir como entrada. Este alfabeto no incluye el s√≠mbolo de blanco.],
  [Alfabeto de Cinta],[#mi("\Gamma")], [Conjunto finito de s√≠mbolos que incluye todos los s√≠mbolos de #mi("\Sigma") y un s√≠mbolo especial de blanco, denotado com√∫nmente como #mi("B") o #mi("‚äî"), donde #mi("B ‚àâ \Sigma").],
  [Funci√≥n de Transici√≥n],[#mi("\delta")], [Se define como #mi("ùõø:Q√óùõ§‚ÜíQ√óùõ§√ó\{L,R\}"). Esta funci√≥n mapea un par (estado actual, s√≠mbolo le√≠do por el cabezal) a una nueva tupla (nuevo estado, s√≠mbolo a escribir en la celda actual, direcci√≥n de movimiento del cabezal).],
  [Estado Inicial],[#mi("q_{0} \in Q")], [Estado en el cual comienza la computaci√≥n.],
  [Estado de Aceptaci√≥n],[#mi("q_{accept} \in Q")], [Si la m√°quina entra en este estado, la computaci√≥n se detiene y la entrada se considera aceptada.],
  [Estado de Rechazo],[#mi("q_{reject} \in Q")], [Si la m√°quina entra en este estado, la computaci√≥n se detiene y la entrada se considera rechazada. Por lo que, #mi("q_{accept} ‚â† q_{reject}").],
)

== La Tesis de Church-Turing
La Tesis de Church-Turing (CTT) establece un v√≠nculo entre la noci√≥n intuitiva de "computabilidad efectiva" y las definiciones formales de computabilidad proporcionadas por diversos modelos matem√°ticos, siendo la M√°quina de Turing el m√°s prominente. Es decir, cualquier procedimiento efectivo (algoritmo) concebible puede implementarse en una M√°quina de Turing. En palabras de D‚ÄôAndrea (2019), ‚Äúuna funci√≥n es efectivamente calculable si y solo si es computable por una M√°quina de Turing‚Äù. Esta no es una afirmaci√≥n demostrable matem√°ticamente, sino una definici√≥n convencional o hip√≥tesis de trabajo.

La relevancia de la tesis radica en que fija el l√≠mite formal de la computabilidad: si un problema no puede resolverse con una MT, entonces no puede resolverse mediante ning√∫n algoritmo realista. A partir de esta teor√≠a, las dos prominencias plantearon:

-   *Tesis de Turing:* Alan Turing propuso que cualquier proceso que pudiera ser "razonablemente dicho que es computado por un computador humano utilizando un procedimiento fijo" o, m√°s generalmente, "un "procedimiento efectivo", puede ser computado por una M√°quina de Turing. Turing articul√≥ su tesis en t√©rminos de "m√°quinas de computaci√≥n l√≥gicas" (sus M√°quinas de Turing) que ser√≠an capaces de realizar "cualquier cosa que pudiera describirse como... 'puramente mec√°nica'".

-   *Tesis de Church:* Por su parte, Alonzo Church expres√≥ su tesis en el contexto de su c√°lculo lambda (#mi("\lambda$")-c√°lculo). √âl identific√≥ las funciones "efectivamente calculables" con las funciones #mi("\lambda")-definibles.

=== Formas Modernas y sus Implicaciones
La Tesis de Church-Turing original se refer√≠a espec√≠ficamente a la computaci√≥n realizada por un ser humano idealizado. Sin embargo, en la ciencia de la computaci√≥n moderna, el t√©rmino ha evolucionado y se utiliza para referirse a m√∫ltiples interpretaciones y extensiones:

-   *CTT-Algorithm (CTT-A):* Orientada a los programas, establece que "todo algoritmo puede ser expresado por un programa en alg√∫n lenguaje de programaci√≥n equivalente a Turing". Por lo que, cualquier algoritmo que se desarrolle para una ALU, incluyendo las operaciones l√≥gicas, puede ser, en principio, simulado por una M√°quina de Turing. Esta tesis requiere que todos los algoritmos est√©n acotados por la computabilidad de Turing.

-   *Extended Church-Turing Thesis (CTT-E):* Utilizada predominantemente en la teor√≠a de la complejidad, postula que "cualquier modelo computacional 'razonable' puede ser simulado eficientemente en una M√°quina de Turing probabil√≠stica". Siendo relevante para el an√°lisis de eficiencia y complejidad.

-   *Physical Church-Turing Theses (CTT-P, CTDW):* Estas formas extienden la CTT al √°mbito del mundo f√≠sico, afirmando que los sistemas f√≠sicos est√°n limitados por la computabilidad de Turing, o que todo sistema f√≠sico finito puede ser simulado por una M√°quina de Turing universal. Estas tesis fueron refutadas con posibles contraejemplos te√≥ricos que incluyen la computaci√≥n cu√°ntica y la computaci√≥n relativista.

Es importante destacar que la CTT no es un teorema matem√°tico que pueda ser probado formalmente, ya que la noci√≥n de "computabilidad efectiva" es, por definici√≥n, informal. Su amplia aceptaci√≥n se fundamenta en la ausencia de contraejemplos que la refuten y en la confluencia de diversos modelos de computaci√≥n que han demostrado ser equivalentes en su poder computacional.

=== Equivalencia de Modelos de Computabilidad
Para el prop√≥sito actual, el enfoque es una ALU cl√°sica que opera bajo los principios de la computaci√≥n algor√≠tmica tradicional, ya que las operaciones realizadas por una ALU son procedimientos algor√≠tmicos bien definidos y, por ende, "efectivamente calculables". Si la CTT es verdadera, lo cual es una suposici√≥n fundamental en la computaci√≥n cl√°sica, entonces cualquier operaci√≥n que una ALU pueda realizar es, en principio, simulable por una M√°quina de Turing.

Aunque existen extensiones de la CTT, como las CTT-P, que son objeto de debate y sugieren modelos te√≥ricos m√°s granulados para el desarrollo pragm√°tico de una arquitectura de computadora, muchos de esos principios son dif√≠cilmente comprobables o tienen una determinaci√≥n completa (muchas veces llegando hasta la indecidibilidad te√≥rica). De esta manera, estos l√≠mites te√≥ricos no pueden lograr trascender la computaci√≥n de Turing cl√°sica en t√©rminos de eficiencia o incluso computabilidad. Por nuestra parte, al explorar los fundamentos de la ALU con MTs, se podr√° tener una comprensi√≥n s√≥lida dentro del marco bien establecido de la computaci√≥n cl√°sica.

== Lenguajes Turing-Reconocibles y Decidibilidad
En el √°mbito de la teor√≠a de la computabilidad, la M√°quina de Turing se emplea como una herramienta para clasificar lenguajes, es decir, conjuntos de cadenas, bas√°ndose en la capacidad de una MT para procesarlos. Esta clasificaci√≥n distingue entre lo que es computable y lo que no lo es, y dentro de lo computable, entre lo que siempre termina y lo que podr√≠a no hacerlo.

=== Definiciones Formales
Una M√°quina de Turing $M$ define un lenguaje #mi("L(M)\subseteq \Sigma^*") que consiste en todas las cadenas que $M$ acepta. Se dice que un lenguaje $L$ es reconocible (recursivamente enumerable) si existe una MT que acepta precisamente las cadenas en $L$. Formalmente, $L$ es recursivamente enumerable si #mi("\exists M : L=L(M)"). En tal caso, $M$ se detiene y acepta cualquier #mi("w \in L") pero si #mi("w ‚àâ L") la MT puede rechazar o incluso entrar en un bucle infinito sin detenerse. Este es el nivel m√°s general de expresividad en la jerarqu√≠a de Chomsky (lenguajes de tipo 0): los lenguajes recursivamente enumerables son justamente aquellos reconocibles por alguna MT.

Un lenguaje $L$ se considera Turing-decidible (o recursivo) si existe una MT que decide el lenguaje, es decir, se detiene sobre todas las entradas dando un veredicto definitivo (‚Äús√≠‚Äù si #mi("w\in L"), "no" si #mi("w ‚àâ L")). En otras palabras, $L$ es decidible si una MT siempre alcanza un estado de aceptaci√≥n o rechazo para cualquier cadena de entrada. En particular, todo lenguaje decidible es recursivamente enumerable, pero el rec√≠proco no vale salvo que tanto $L$ como su complemento sean recursivamente enumerables. Por ejemplo, el lenguaje de las cadenas que representan n√∫meros primos (en binario) es recursivamente enumerable: una MT puede verificar la primalidad y aceptar si el n√∫mero es primo. Pero para decidir la primalidad se requerir√≠a que la MT se detenga tambi√©n cuando el n√∫mero no es primo, lo cual no es evidente en un modelo sin l√≠mites de tiempo (no se logr√≥ en la simulaci√≥n simple antes de la s√≠ntesis formal de la MT). En contraste, el lenguaje de cadenas bien formadas (por ejemplo, de par√©ntesis balanceados) es decidible porque existe un algoritmo que siempre detiene y comprueba la propiedad.

=== Implicaciones en la Teor√≠a de la Computaci√≥n
Para ilustrar el modelado, consideremos un ejemplo de MT que realice la operaci√≥n l√≥gica AND sobre dos bits. Supongamos que la entrada en la cinta son dos s√≠mbolos consecutivos que representan los bits (por ejemplo, ‚Äò0‚Äô o ‚Äò1‚Äô), seguidos de blancos. Podemos definir $M$ con estados $q_0$ y $q_1$ tal que: si est√° en $q_0$ y lee ‚Äò0‚Äô (el primer bit es 0), entonces la MT escribe ‚Äò0‚Äô en su lugar y entra al estado de parada #mi("q_{acep}") (ya que 0 AND \* = 0). Si en $q_0$ lee ‚Äò1‚Äô, entonces pasa al estado $q_1$ y mueve el cabezal a la derecha (para leer el segundo bit). Entonces, en estado $q_1$, si lee ‚Äò0‚Äô escribe ‚Äò0‚Äô y termina, o si lee ‚Äò1‚Äô escribe ‚Äò1‚Äô y termina. En s√≠mbolo, algunas transiciones ser√≠an:

#mitex("\delta \ ( q_{0} ,0) =( q_{acep} ,0,S) ,\ \delta ( q_{0} ,1) =( q_{1} ,1,R) ,")
#mitex("\delta ( q_{1} ,0) =( q_{acep} ,0,S) ,\ \delta ( q_{1} ,1) =( q_{acep} ,1,S) ")

Aqu√≠ $S$ denota ‚Äúdetenerse‚Äù (estado de aceptaci√≥n). De este modo, la MT deja en la cinta el bit resultado (0 o 1) que corresponde al AND de los dos bits de entrada. Este esquema puede formalizarse con notaci√≥n #mi("\delta") y transiciones definidas expl√≠citamente en LaTeX, ejemplificando c√≥mo el c√°lculo booleano se traduce a la ejecuci√≥n paso a paso de la MT.

Por lo tanto, dado que la M√°quina de Turing dise√±ada para implementar estas operaciones siempre finalizar√° y producir√° un resultado definido para cualquier par de entradas binarias, las funciones computadas se clasifican como "totalmente computables". En consecuencia, el lenguaje que representa la relaci√≥n entre las entradas y las salidas de estas operaciones es decidible. Este hecho contrasta con problemas m√°s complejos que pueden ser Turing-reconocibles pero no decidibles, como el ya mencionado problema de la parada.
#pagebreak()